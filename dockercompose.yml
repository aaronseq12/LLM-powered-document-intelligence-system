# Docker Compose configuration for LLM Document Intelligence System
# Comprehensive service orchestration for development, staging, and production

version: '3.8'

services:
  # ================================
  # Application Services
  # ================================
  
  # Main application service
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: llm-doc-intelligence-app
    restart: unless-stopped
    ports:
      - "${APP_PORT:-8000}:8000"
      - "${NGINX_PORT:-80}:80"
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-document_intelligence}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-password}@redis:6379/0
      - AZURE_OPENAI_API_KEY=${AZURE_OPENAI_API_KEY}
      - AZURE_OPENAI_ENDPOINT=${AZURE_OPENAI_ENDPOINT}
      - AZURE_DOCUMENT_INTELLIGENCE_KEY=${AZURE_DOCUMENT_INTELLIGENCE_KEY}
      - AZURE_DOCUMENT_INTELLIGENCE_ENDPOINT=${AZURE_DOCUMENT_INTELLIGENCE_ENDPOINT}
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-change-in-production}
    volumes:
      - app_data:/app/data
      - app_logs:/app/logs
      - uploads:/tmp/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - llm_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.app.rule=Host(`${DOMAIN:-localhost}`)"
      - "traefik.http.services.app.loadbalancer.server.port=80"
  
  # Development service (override for development)
  app-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: llm-doc-intelligence-app-dev
    restart: unless-stopped
    ports:
      - "${DEV_APP_PORT:-8000}:8000"
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-document_intelligence}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-password}@redis:6379/0
      - AZURE_OPENAI_API_KEY=${AZURE_OPENAI_API_KEY}
      - AZURE_OPENAI_ENDPOINT=${AZURE_OPENAI_ENDPOINT}
      - AZURE_DOCUMENT_INTELLIGENCE_KEY=${AZURE_DOCUMENT_INTELLIGENCE_KEY}
      - AZURE_DOCUMENT_INTELLIGENCE_ENDPOINT=${AZURE_DOCUMENT_INTELLIGENCE_ENDPOINT}
      - SECRET_KEY=${SECRET_KEY:-dev-secret-key}
    volumes:
      - .:/app
      - app_data_dev:/app/data
      - app_logs_dev:/app/logs
      - uploads_dev:/tmp/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - llm_network
    profiles:
      - dev

  # ================================
  # Database Services
  # ================================
  
  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: llm-doc-intelligence-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-document_intelligence}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data/pgdata
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - llm_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-document_intelligence}"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: llm-doc-intelligence-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-password} --appendonly yes --appendfsync everysec
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-password}
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/etc/redis/redis.conf:ro
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - llm_network
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD:-password}", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ================================
  # Background Services
  # ================================
  
  # Celery worker for background tasks
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: llm-doc-intelligence-celery-worker
    restart: unless-stopped
    command: celery -A main.celery worker --loglevel=info --concurrency=4 --prefetch-multiplier=1
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-document_intelligence}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-password}@redis:6379/0
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD:-password}@redis:6379/1
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD:-password}@redis:6379/2
      - AZURE_OPENAI_API_KEY=${AZURE_OPENAI_API_KEY}
      - AZURE_OPENAI_ENDPOINT=${AZURE_OPENAI_ENDPOINT}
      - AZURE_DOCUMENT_INTELLIGENCE_KEY=${AZURE_DOCUMENT_INTELLIGENCE_KEY}
      - AZURE_DOCUMENT_INTELLIGENCE_ENDPOINT=${AZURE_DOCUMENT_INTELLIGENCE_ENDPOINT}
    volumes:
      - uploads:/tmp/uploads
      - app_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - llm_network
    healthcheck:
      test: ["CMD", "celery", "-A", "main.celery", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Celery beat for scheduled tasks
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: llm-doc-intelligence-celery-beat
    restart: unless-stopped
    command: celery -A main.celery beat --loglevel=info --schedule=/app/celerybeat-schedule
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-document_intelligence}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-password}@redis:6379/0
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD:-password}@redis:6379/1
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD:-password}@redis:6379/2
    volumes:
      - celery_beat_data:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - llm_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Celery flower for monitoring
  celery-flower:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: llm-doc-intelligence-celery-flower
    restart: unless-stopped
    command: celery -A main.celery flower --port=5555
    environment:
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD:-password}@redis:6379/1
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD:-password}@redis:6379/2
    ports:
      - "${FLOWER_PORT:-5555}:5555"
    depends_on:
      - redis
    networks:
      - llm_network
    profiles:
      - monitoring

  # ================================
  # Monitoring Services
  # ================================
  
  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:v2.40.7
    container_name: llm-doc-intelligence-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=30d'
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    networks:
      - llm_network
    profiles:
      - monitoring

  # Grafana for visualization
  grafana:
    image: grafana/grafana:9.3.2
    container_name: llm-doc-intelligence-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    depends_on:
      - prometheus
    networks:
      - llm_network
    profiles:
      - monitoring

  # Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:v1.5.0
    container_name: llm-doc-intelligence-node-exporter
    restart: unless-stopped
    command:
      - '--path.rootfs=/host'
    volumes:
      - '/:/host:ro,rslave'
    ports:
      - "${NODE_EXPORTER_PORT:-9100}:9100"
    networks:
      - llm_network
    profiles:
      - monitoring

  # ================================
  # Reverse Proxy & Load Balancer
  # ================================
  
  # Traefik reverse proxy
  traefik:
    image: traefik:v2.10
    container_name: llm-doc-intelligence-traefik
    restart: unless-stopped
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL:-admin@example.com}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_data:/letsencrypt
    networks:
      - llm_network
    profiles:
      - proxy

  # ================================
  # Development Tools
  # ================================
  
  # pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:6.20
    container_name: llm-doc-intelligence-pgadmin
    restart: unless-stopped
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL:-admin@example.com}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD:-admin}
      - PGADMIN_CONFIG_SERVER_MODE=False
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    depends_on:
      - postgres
    networks:
      - llm_network
    profiles:
      - dev
      - tools

  # Redis Commander for Redis management
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: llm-doc-intelligence-redis-commander
    restart: unless-stopped
    environment:
      - REDIS_HOSTS=local:redis:6379:0:${REDIS_PASSWORD:-password}
    ports:
      - "${REDIS_COMMANDER_PORT:-8081}:8081"
    depends_on:
      - redis
    networks:
      - llm_network
    profiles:
      - dev
      - tools

# ================================
# Networks
# ================================
networks:
  llm_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ================================
# Volumes
# ================================
volumes:
  # Application data
  app_data:
    driver: local
  app_data_dev:
    driver: local
  app_logs:
    driver: local
  app_logs_dev:
    driver: local
  uploads:
    driver: local
  uploads_dev:
    driver: local

  # Database data
  postgres_data:
    driver: local
  redis_data:
    driver: local

  # Background services
  celery_beat_data:
    driver: local

  # Monitoring data
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

  # Tools data
  pgadmin_data:
    driver: local
  traefik_data:
    driver: local