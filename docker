# ==============================================================================
# Multi-stage Dockerfile for the LLM Document Intelligence System
#
# This Dockerfile is optimized for production, creating a small, secure, and
# efficient final image. It uses multi-stage builds to separate the build
# environment from the runtime environment.
#
# Stages:
# 1. backend-builder: Installs Python dependencies.
# 2. frontend-builder: Builds the React frontend.
# 3. production: The final, optimized runtime image.
# 4. development: A development-focused image with hot-reloading.
# ==============================================================================

# ------------------------------------------------------------------------------
# Stage 1: Backend Builder
#
# This stage installs all the Python dependencies needed for the application.
# By separating this into its own stage, we keep the final image clean.
# ------------------------------------------------------------------------------
FROM python:3.11-slim as backend-builder

# Set environment variables for a consistent build environment
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1

# Install system dependencies required for building Python packages
RUN apt-get update && apt-get install -y build-essential

# Set the working directory
WORKDIR /app

# Copy and install Python requirements
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# ------------------------------------------------------------------------------
# Stage 2: Frontend Builder
#
# This stage builds the static assets for the React frontend.
# ------------------------------------------------------------------------------
FROM node:18-alpine as frontend-builder

# Set the working directory
WORKDIR /app/frontend

# Copy and install Node.js dependencies
COPY package*.json ./
RUN npm ci

# Copy the frontend source code and build the application
COPY . .
RUN npm run build

# ------------------------------------------------------------------------------
# Stage 3: Production Image
#
# This is the final image that will be deployed. It is optimized for size
# and security.
# ------------------------------------------------------------------------------
FROM python:3.11-slim as production

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    ENVIRONMENT=production

# Create a non-root user for security
RUN addgroup --system app && adduser --system --group app

# Set the working directory
WORKDIR /app

# Copy Python dependencies from the backend-builder stage
COPY --from=backend-builder /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages

# Copy the backend application code
COPY . .

# Copy the built frontend from the frontend-builder stage
COPY --from=frontend-builder /app/frontend/dist /app/static

# Set ownership of the application files
RUN chown -R app:app /app

# Switch to the non-root user
USER app

# Expose the application port
EXPOSE 8000

# The command to run the application in production
CMD ["gunicorn", "-c", "gunicorn.conf.py", "main:app"]

# ------------------------------------------------------------------------------
# Stage 4: Development Image
#
# This image is used for local development. It includes development tools
# and enables hot-reloading.
# ------------------------------------------------------------------------------
FROM python:3.11-slim as development

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    ENVIRONMENT=development

# Set the working directory
WORKDIR /app

# Install Python dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy the application code
COPY . .

# Expose the application port
EXPOSE 8000

# The command to run the application in development with hot-reloading
CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]