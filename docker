# Multi-stage Docker configuration for LLM Document Intelligence System
# Optimized for production deployment with security and performance considerations

# ================================
# Backend Build Stage
# ================================
FROM python:3.11-slim as backend-builder

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONHASHSEED=random \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    PIP_DEFAULT_TIMEOUT=100

# Install system dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    curl \
    git \
    gcc \
    g++ \
    libmagic1 \
    libmagic-dev \
    libpq-dev \
    libssl-dev \
    libffi-dev \
    libxml2-dev \
    libxslt-dev \
    zlib1g-dev \
    libjpeg-dev \
    libpng-dev \
    libtiff-dev \
    libfreetype6-dev \
    && rm -rf /var/lib/apt/lists/*

# Create app user
RUN groupadd -r appuser && useradd -r -g appuser appuser

# Set work directory
WORKDIR /app

# Copy requirements and install Python dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir --upgrade pip setuptools wheel && \
    pip install --no-cache-dir -r requirements.txt

# ================================
# Frontend Build Stage
# ================================
FROM node:18-alpine as frontend-builder

# Set working directory
WORKDIR /app/frontend

# Install dependencies
COPY package*.json ./
RUN npm ci --only=production --silent

# Copy source code and build
COPY . .
RUN npm run build

# ================================
# Production Runtime Stage
# ================================
FROM python:3.11-slim as production

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONHASHSEED=random \
    PATH="/home/appuser/.local/bin:$PATH" \
    ENVIRONMENT=production

# Install runtime system dependencies
RUN apt-get update && apt-get install -y \
    libmagic1 \
    libpq5 \
    curl \
    nginx \
    supervisor \
    && rm -rf /var/lib/apt/lists/*

# Create app user and directories
RUN groupadd -r appuser && useradd -r -g appuser appuser && \
    mkdir -p /app /home/appuser/.local /var/log/app /var/run/app && \
    chown -R appuser:appuser /app /home/appuser /var/log/app /var/run/app

# Set work directory
WORKDIR /app

# Copy Python dependencies from builder stage
COPY --from=backend-builder /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages
COPY --from=backend-builder /usr/local/bin /usr/local/bin

# Copy backend application
COPY --chown=appuser:appuser . .

# Copy built frontend from frontend-builder stage
COPY --from=frontend-builder --chown=appuser:appuser /app/frontend/dist /app/static

# Create necessary directories and set permissions
RUN mkdir -p /tmp/uploads /app/logs /app/static && \
    chown -R appuser:appuser /tmp/uploads /app/logs /app/static && \
    chmod 755 /tmp/uploads /app/logs

# Copy configuration files
COPY --chown=appuser:appuser docker/nginx.conf /etc/nginx/sites-available/default
COPY --chown=appuser:appuser docker/supervisord.conf /etc/supervisor/conf.d/supervisord.conf
COPY --chown=appuser:appuser docker/entrypoint.sh /entrypoint.sh

# Make entrypoint executable
RUN chmod +x /entrypoint.sh

# Expose ports
EXPOSE 8000 80

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Switch to non-root user
USER appuser

# Set entrypoint
ENTRYPOINT ["/entrypoint.sh"]

# ================================
# Development Stage
# ================================
FROM python:3.11-slim as development

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONHASHSEED=random \
    ENVIRONMENT=development

# Install system dependencies including dev tools
RUN apt-get update && apt-get install -y \
    build-essential \
    curl \
    git \
    vim \
    gcc \
    g++ \
    libmagic1 \
    libmagic-dev \
    libpq-dev \
    libssl-dev \
    libffi-dev \
    libxml2-dev \
    libxslt-dev \
    zlib1g-dev \
    libjpeg-dev \
    libpng-dev \
    libtiff-dev \
    libfreetype6-dev \
    && rm -rf /var/lib/apt/lists/*

# Create app user
RUN groupadd -r appuser && useradd -r -g appuser -s /bin/bash appuser

# Set work directory
WORKDIR /app

# Install Python dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir --upgrade pip setuptools wheel && \
    pip install --no-cache-dir -r requirements.txt && \
    pip install --no-cache-dir \
    ipdb \
    pytest-xdist \
    pytest-cov \
    black \
    isort \
    flake8 \
    mypy

# Create necessary directories and set permissions
RUN mkdir -p /tmp/uploads /app/logs && \
    chown -R appuser:appuser /app /tmp/uploads && \
    chmod 755 /tmp/uploads

# Copy application code
COPY --chown=appuser:appuser . .

# Switch to non-root user
USER appuser

# Expose port
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Default command for development
CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]

# ================================
# Testing Stage
# ================================
FROM development as testing

# Install additional testing dependencies
RUN pip install --no-cache-dir \
    pytest-asyncio \
    pytest-mock \
    httpx \
    factory-boy \
    faker

# Copy test files
COPY --chown=appuser:appuser tests/ tests/

# Run tests
CMD ["python", "-m", "pytest", "tests/", "-v", "--cov=.", "--cov-report=html", "--cov-report=term"]