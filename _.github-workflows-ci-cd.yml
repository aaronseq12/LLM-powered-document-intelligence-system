# ==============================================================================
# Continuous Integration & Continuous Deployment (CI/CD) Pipeline
#
# This GitHub Actions workflow automates the testing, building, and deployment
# of the LLM Document Intelligence System.
#
# Workflow Triggers:
# - Push to `main`, `develop`, `feature/*`, or `hotfix/*` branches.
# - Pull request to `main` or `develop` branches.
# - Publication of a new release.
# - Weekly schedule for security scans.
# ==============================================================================

name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/*, hotfix/* ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]
  schedule:
    # Run weekly security scans every Monday at 2 AM.
    - cron: '0 2 * * 1'

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  DOCKER_REGISTRY: ghcr.io
  DOCKER_IMAGE_NAME: ${{ github.repository }}

jobs:
  # ------------------------------------------------------------------------------
  # Job: Code Quality and Linting
  #
  # This job ensures that the code adheres to the project's coding standards
  # and best practices. It checks for formatting, linting, and type errors.
  # ------------------------------------------------------------------------------
  lint-and-format:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Install Node.js dependencies
      run: npm ci
      
    - name: Check Python code formatting (Black)
      run: black --check .
      
    - name: Check Python import sorting (isort)
      run: isort --check-only .
      
    - name: Lint Python code (flake8)
      run: flake8 .
        
    - name: Check Python types (mypy)
      run: mypy . --ignore-missing-imports
      
    - name: Lint TypeScript code
      run: npm run lint

  # ------------------------------------------------------------------------------
  # Job: Backend Tests
  #
  # This job runs the unit and integration tests for the Python backend.
  # It uses service containers for the database and Redis to create a realistic
  # testing environment.
  # ------------------------------------------------------------------------------
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run backend tests
      env:
        DATABASE_URL: postgresql+asyncpg://postgres:password@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key
      run: pytest tests/
        
    - name: Upload test coverage
      uses: codecov/codecov-action@v3

  # ------------------------------------------------------------------------------
  # Job: Frontend Tests
  #
  # This job runs the unit and component tests for the React frontend.
  # ------------------------------------------------------------------------------
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run frontend tests
      run: npm test
      
    - name: Upload test coverage
      uses: codecov/codecov-action@v3

  # ------------------------------------------------------------------------------
  # Job: Security Scanning
  #
  # This job performs various security scans on the codebase to identify
  # potential vulnerabilities.
  # ------------------------------------------------------------------------------
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # ------------------------------------------------------------------------------
  # Job: Build Docker Image
  #
  # This job builds the Docker image for the application and pushes it to the
  # container registry. This is done for push events and releases.
  # ------------------------------------------------------------------------------
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [lint-and-format, backend-tests, frontend-tests]
    if: github.event_name == 'push' || github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Log in to container registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}

  # ------------------------------------------------------------------------------
  # Job: Deploy to Staging
  #
  # This job deploys the application to the staging environment. It is triggered
  # on pushes to the `develop` branch.
  # ------------------------------------------------------------------------------
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    
    steps:
    - name: Deploy to staging environment
      run: echo "Deploying to staging..."
      # Add your staging deployment commands here.

  # ------------------------------------------------------------------------------
  # Job: Deploy to Production
  #
  # This job deploys the application to the production environment. It is
  # triggered when a new release is published.
  # ------------------------------------------------------------------------------
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.event_name == 'release'
    environment: production
    
    steps:
    - name: Deploy to production environment
      run: echo "Deploying to production..."
      # Add your production deployment commands here.

