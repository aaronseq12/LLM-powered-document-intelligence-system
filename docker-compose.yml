# ==============================================================================
# Docker Compose Configuration for LLM Document Intelligence System
#
# This file defines the services, networks, and volumes for the application,
# making it easy to run the entire stack with a single command. It is
# designed to support different environments (development, production).
# ==============================================================================

version: '3.8'

services:
  # ------------------------------------------------------------------------------
  # Application Service (Backend)
  #
  # This service runs the FastAPI backend application.
  # ------------------------------------------------------------------------------
  app:
    build:
      context: .
      dockerfile: Dockerfile
      # The 'target' specifies which stage from the Dockerfile to build.
      target: ${DOCKER_BUILD_TARGET:-development}
    container_name: llm-doc-intelligence-app
    restart: unless-stopped
    ports:
      # Maps port 8000 on the host to port 8000 in the container.
      - "${APP_PORT:-8000}:8000"
    environment:
      # Environment variables are passed to the container.
      # It's recommended to use a .env file for sensitive data.
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-document_intelligence}
      - REDIS_URL=redis://${REDIS_PASSWORD:-password}@redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-a-dev-secret-key}
    volumes:
      # Mounts the current directory to /app in the container for development.
      - .:/app
    depends_on:
      # Ensures that the database and Redis are running before the app starts.
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - llm_network
    # Health check to ensure the service is running correctly.
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ------------------------------------------------------------------------------
  # PostgreSQL Database Service
  #
  # This service runs the PostgreSQL database for data storage.
  # ------------------------------------------------------------------------------
  postgres:
    image: postgres:15-alpine
    container_name: llm-doc-intelligence-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-document_intelligence}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
    volumes:
      # Persists database data on the host machine.
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - llm_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ------------------------------------------------------------------------------
  # Redis Service
  #
  # This service runs Redis for caching and message queuing.
  # ------------------------------------------------------------------------------
  redis:
    image: redis:7-alpine
    container_name: llm-doc-intelligence-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-password}
    volumes:
      # Persists Redis data on the host machine.
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - llm_network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-password}", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

# ==============================================================================
# Networks
#
# Defines the network that the services will use to communicate.
# ==============================================================================
networks:
  llm_network:
    driver: bridge

# ==============================================================================
# Volumes
#
# Defines the named volumes for data persistence.
# ==============================================================================
volumes:
  postgres_data:
  redis_data: